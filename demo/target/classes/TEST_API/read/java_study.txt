1. 스트링 

concat, '+' 오퍼레이터 사용 대신
StringBuffer, StringBuilder 사용 가능
위의 연산자 및 String 함수 사용시 메모리 내 재할당이 이루어짐 (String은 불변) 때문에 리소스 사용량이 많음
하단의 두 클래스는 값을 변화시키기 때문에 상대적으로 리소스 사용량이 적음

다만, StringBuffer는 멀티 스레드 환경에서 사용해야 하며 적은 작업에 대해서는 String 보다 cost가 큼
StringBuilder는 단일 스레드 환경에서 제일 높은 효율을 가짐

즉, 멀티스레드+높은 빈도로 값이 변경되는 경우 StringBuffer
    단일스레드+높은 빈도로 값 변경 StringBuilder
    값이 적은 빈도로 변경되는 경우 String을 사용할 수 있음.

2. 쓰레드

콘솔 기반을 제외한 모든 자바 프로그램은 스레드를 사용함 추상윈도우툴킷AWT에서 자동으로
스레드를 만들기 때문, 프로그램의 첫 윈도우가 생성될 때 특수 스레드를 생성하며 운영체제에 대한 이벤트를 처리
결론적으로 프로그램은 대부분 최소 2개의 스레드가 실행되고 있다고 볼 수 있음.
(main()에 대한 처리를 하는 메인 쓰레드와, AWT쓰레드가 생성됨)

중요한 것은 리스너들의 매소드는 AWT쓰레드에서 실행된다는 점.

발생될 수 있는 문제 2가지
리스너는 AWT에서 실행되고 있지만 메인 쓰레드 상에서 또한 생성되고 접근될 있기에 경쟁상태가 될 수 있다.
리스너 객체는 외부 클래스에 접근 가능한 내부 클래스(클래스 내 선언된 클래스)이기 때문임.
이에 대해서 키워드를 이용해 공유해야할 객체에 순서대로 접근 할 수 있도록 해야 함.
(내부 클래스 내 STATIC 클래스는 초기화(상위 클래스) 때마다 메모리상에 다른 객체가 만들어짐, 
 일반적으로 STATIC으로 선언해야 하며 위의 문제점과 같이 위부 참조를 갖게되어 COST 및 충돌문제 야기) 
큰 문제는 AWT가 윈도우 이벤트를 처리하기 때문에 리스너 객체가 오랜 시간이 걸리는 작업을 하고 있다면
마우스,키보드 등 운영체제 수준의 이벤트가 처리가 안된다는 점임. 즉 취소 등도 불가능함->명령은 큐에 쌓임

GUI에서 사용자 환경을 제공할 때 위와 같은 상황이 발생하면 안됨. 
때문에 멀티 스레드를 사용하여 이를 방지해야 함.

자바의 멀티 스레드는 플랫폼에 독립적이지 않음 때문에 상당히 어려움.
이에 대한 시도로 ACE 프레임워크가 있음.

3. 쓰레드와 프로세스 
실행중인 프로세스를 교체하는 컨택스트 스위칭(스왑)은 실행중인 PCB 정보를 메인메모리(디스크)에 저장하고
실행하려는 프로세스의 PCB 정보를 메인메모리에서 메모리로 로드하는 것임.
가상머신은 힙(new키워드)메모리를 사용하며 이의 데이터는 프로세스에 속해있지 쓰레드에 속하지 않음.

자바에서의 쓰레드와 일반적인 쓰레드는 다름. jvm에 의해 실행되는 바이트 코드 인스트럭션의 순서로 
쉽게 실행순서 정도로 볼 수 있음.

스레드를 적절하게 다루기 위해선 명령어를 원자화 시킬 필요성이 있음.
기본원자성은 더블과 롱을 제외한 변수 할당 정도의 최소의 작업만을 얘기하며, ++ 등 연산자 작업은 원자성이 아님
따라서 객체에 대한 경쟁상태에 놓일 수 있음.
스레드의 단일 작업을 원자성으로 하는 경우 동기화(synchronized)를 해야 함. 위의 연산자 등에도 적용이 필요함.
경쟁상태를 피할 수 있는게 원자성을 가진다고 볼 수 있음.
불변성은 String 객체와 같이 절대 변하지 않는 객체를 뜻함. 불변성을 가진 객체를 이용한 연산은 보통 원자적이지
않으나 불변성을 가지기에 여러 스레드가 접근해도 상관없음 따라서 동기화가 불필요함.
그러니 접근이 많은 객체에 대해 해당 객체의 정보 조회는 빈번하지만 객체 자체의 변형이 생기지 않는 경우
동기화보다 불변성을 갖게 하는게 더 좋은 선택지가 될 수 있음. (객체의 변경빈도가 높으면 오버헤드 때문에 동기화)

콜렉션은 기본적으로 동기화된 매소드를 갖고 있어 콜랙션을 이용하는 매소드는 동기화를 굳이 할 필요가 없음.
동기화를 진행하는 경우 이중으로 락이 걸린 형태가 됨.
특정 객체가 특정 인터페이스를 기반으로 할 때 동일한 인터페이스를 기반으로 한 객체를 내부에 가지고 있는 형태
를 가정했을 때 외부 객체 요청이 들어왔을 때 내부 객체로 향하게 하는 것을 데코레이터 패턴이라고 함.
예를 들어 버퍼인풋스트림은 인풋스트림을 그대로 가지고 있으며 동시에 인풋스트림 객체를 가지고 있음.
외부에서 버퍼인풋스트림에 요청을 하면 그 요청을 내부객체인 인풋스트림 인스턴스로 향하게 하지만 결과는
일반 인풋스트림을 사용했을 때와 다른 결과가 도출됨.
ex) 버퍼인풋스트림 내 read() 이용시 파일인풋스트림을 향하게 하여 문자를 버퍼링시킴
    일반 파일인풋스트림에 read요청시 버퍼링을 발생시키지 않음

이 데코레이터 패턴 개념을 동기화에 응용할 수 잇음
01: interface Some_interface
02: { 
      public Object message();
03: }
04:
05: class Not_thread_safe implements Some_interface
06: {
07:   public Object message()
08:   { / / 이부분에구현을한다.
09:     return null;
10:   }
11: }
12:
13: class Thread_safe_wrapper implements Some_interface
14: {
15:   Some_interface not_thread_safe;
16:
17:   public Thread_safe_wrapper( Some_interface not_thread_safe )
18:   { 
        this.not_thread_safe = not_thread_safe;
19:   }
20:
21:   public Some_interface extract ()
22:   { 
         return not_thread_safe();
23:   }
24:
25:   public synchronized Object message()  // 여기서 동기화를 걸어버림
26:   { 
         return not_thread_safe.message();
27:   }
28: }

위의 예제에서 Thread_safe_wrapper 사용시 데코레이터 패턴으로 Some_interface not_thread_safe; 가지고잇음.
동기화된  return not_thread_safe.message(); 을 사용하는걸 볼 수 있음.
이렇게 하는걸 동기화래퍼 라고 함.
불필요시 object = ((Thread_safe_wrapper)object).extract (); 로 랩을 벗겨 직접 호출하면 됨


자바가 플랫폼에 대해 독립적이지 못한 이유인 동시성과 병렬성
동시성 멀티 스레딩은 몇가지 일들이 동시에 실행되는 것 과 같이 보이나, 각 작업을 잘게 쪼게어 순차적으로
처리하는 것으로 작업들이 한 프로세서에서 처리되는 것임.
병렬성은 실제로 각 프로세서가 각 작업을 가져가서 처리하는 것임.(병렬시스템은cpu가 2개 이상 필요하단 말임.)
병렬 프로세싱이 지원되는 경우 쓰레드를 프로세서의 개수만큼 둘 수 있는데 결국 플랫폼의 스펙이 파악되야 한단거
운영체제의 쓰레드 모델을 사용해야면 실제 병렬성을 얻는거임.
JVM은 위에서 서술되었듯, 한개의 스레드에서 운영됨 즉 얼마나 많은 스레드를 생성하든 실제로는 한개의 스레드에서
동작하기때문에 동시성은 있지만 병렬성이 없음.
결과적으로 자바 스레드를 OS 스레드로 매핑시키는 게 포인트. (이는 현재 V스레드로 진행됨 JAVA21)
플랫폼 제약 사항이었던 부분을 ForkJoinPool을 이용하여 프로세서 개수 파악 후 값 만큼 스레드를 할당함.

스레드의 우선순위 단계(복수의 스레드가 대기상태일 때 우선도를 배정하는 것)
솔라리스는 2의 31승 만큼의 우선순위 단계가 존재 자바는 이론상 10개의 우선순위 단계 존재
MS NT에서는 7단계 제공되는데 NT의 우선순위가 더 적다보니 세분화 시키는 것이 아닌 묶어서 동일하게
7단계로 맞추는게 좋음. 여기서 문제는 NT는 우선순위가 고정이 아님.
우선순위중대라는 매커니즘을 가지고 있는데 C에서는 시스템 콜을 직접 하여 이를 우회할 수 있으나 자바는불가
NT 에서는 I/O에 대한 작업의 우선순위를 높여서 작업 할 수 있고 끝날때까지 이 우선순위를 유지함.
일반적으로 스레드는 I/O 작업이 빈번하기 때문에 우선순위가 설정한것과 다르게 동작될 수 있다는것.

포르세스도 우선순위를 가지는 사용OS에서는 높은 우선순위의 프로세스에 속하는 스레드의 경우
자신보다 낮은 포스세스의 작업에 의해 중단되지 않음. 
그러나 NT는 프로세스가 단순한 주소공간이기 때문에 프로세스 자체에 대한 우선순위가 없고 스케줄링되지 않음.
NT에서는 프로세스가 아닌 스레드를 스케줄링함.
